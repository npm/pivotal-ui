@import "../pui-variables";
@import "../mixins";

/*doc
---
title: Tables
name: table
categories:
 - css_components_tables
 - css_all
---

<code class="pam">
<i class="fa fa-download" alt="Install the Component">
npm install @npmcorp/pui-css-tables --save
</i>
</code>



Class                 | Description
--------------------- | -----------------
`.table`              | Base table class, applies spacing and cross browser support. Unfortunately inherits some undesirable styles from bootstrap.
`.table-hover`        | Adds a light blue background color to table rows when the user hovers over them (use to indicate clickability)
`.table-striped`      | Applies zebra striping to a table.
`.table-divided`      | Adds vertical dividers to tables.
`.table-borderless`   | Removes all borders from a table

You can use grid column classes on `th` and `td` elements. See key-value table for example.

*/

@mixin table-vert-divided() {
  > td:not(:last-child),
  > .td:not(:last-child),
  > th:not(:last-child),
  > .th:not(:last-child) {
    border-right: 1px solid $gray-8;
  }
}

@mixin table-horz-divided() {
  > tr, > .tr {
    border-bottom: 1px solid $gray-8;
    > th, > .th {
      border-bottom: inherit; // Override bootstrap
    }
  }
}

.table-divided {
  > thead, > tbody, > .thead, > .tbody {
    > tr, > .tr {
      @include table-vert-divided();
    }
  }
  > tr, > .tr {
    @include table-vert-divided();
  }
}

table, .table {
  border: 0;
  > thead, > tbody, > .thead, > .tbody {
    @include table-horz-divided();
  }
  @include table-horz-divided();
}

.table > tbody + tbody {
    border-top: 1px solid $gray-8; // override bootstrap
}

/*doc
---
title: Friendly Table
name: 1_table_friendly
parent: table
---

This is a table used to display many rows of data, with headers and
footers. Use it for tables of information or associations such as
user lists with permissions and action menus

```html_example
<table class="table table-friendly table-header-gray-10">
  <thead>
    <tr>
      <th>Wombat Type</th>
      <th>Surprisingness</th>
      <th>Cuteness</th>
    </tr>
  </thead>
  <tbody class="bg-neutral-11">
    <tr>
      <td>Baby Wombat</td>
      <td>100</td>
      <td>Infinity</td>
    </tr>
    <tr>
      <td>World's Largest</td>
      <td>1000</td>
      <td>99.5</td>
    </tr>
    <tr>
      <td>In native habitat</td>
      <td>12</td>
      <td>315</td>
    </tr>
  </tbody>
  <tfoot>
    <tr>
      <th>Average</th>
      <td>506</td>
      <td>Infinity</td>
    </tr>
  </tfoot>
</table>
```

*/

table.table-friendly { // tag name included to get enough specificity to override bootstrap rules.
  border-collapse: separate;
  > :first-child > tr:first-child, > tr:first-child {
    > :first-child {
      border-top-left-radius: 10px !important;
    }
    > :last-child {
      border-top-right-radius: 10px !important;
    }
    >td, >th {
      border-top: 1px solid $gray-8;
    }
  }
  > * > tr, > tr {
    > :first-child {
      border-left: 1px solid $gray-8;
    }
    > :last-child {
      border-right: 1px solid $gray-8;
    }
  }
  > :last-child > tr:last-child, > tr:last-child {
    > :first-child {
      border-bottom-left-radius: 10px !important;
    }
    > :last-child {
      border-bottom-right-radius: 10px !important;
    }
    > td, > th {
      border-bottom: 1px solid $gray-8;
    }
  }
  > thead, > tfoot {
    background-color: $gray-10;
  }
}


/*doc
---
title: Data (Deprecated)
name: 1_table_data
parent: table
---

This is a table used to display many rows of data.

```html_example
<div class="panel panel-basic-alt panel-table-wrapper">
  <div class="panel-body pan">
    <table class="table table-data man">
      <thead>
        <tr>
          <th>Wombat Type</th>
          <th>Surprisingness</th>
          <th>Cuteness</th>
        </tr>
      </thead>
      <tbody class="bg-neutral-11">
        <tr>
          <td>Baby Wombat</td>
          <td>100</td>
          <td>Infinity</td>
        </tr>
        <tr>
          <td>World's Largest</td>
          <td>1000</td>
          <td>99.5</td>
        </tr>
        <tr>
          <td>In native habitat</td>
          <td>12</td>
          <td>315</td>
        </tr>
      </tbody>
    </table>
  </div>
</div>
```

*/

/*doc
---
title: Alternate (Deprecated)
name: 2_table_alt
parent: table
---

Another table style we intend to use.

```html_example
<div class="panel panel-basic-alt panel-table-wrapper">
  <div class="panel-body pan">
    <table class="table table-data table-divided man">
      <thead>
        <tr>
          <th>Wombat Relative</th>
          <th>Cuteness Index</th>
          <th>Relatedness</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>Numbat</td>
          <td>2</td>
          <td>6</td>
        </tr>
        <tr>
          <td>Kangaroo</td>
          <td>91</td>
          <td>60</td>
        </tr>
        <tr>
          <td>Wallaby</td>
          <td>31</td>
          <td>55</td>
        </tr>
      </tbody>
    </table>
  </div>
</div>
```

*/

.table-data {
  border: none;
  background-color: $gray-10;

  tbody, thead, .tbody, .thead {
    tr, .tr {
      th, .th {
        border-color: $gray-8;
        color: $navy-3;
        padding: 15px 10px;
      }
      td, .td {
        color: $navy-3;
        padding: 10px 10px;
        border: none; // overwriting bootstrap default values which are too specific
      }
    }
  }

  > thead > tr, > .thead > .tr {
    &:last-child {
    }
    > th, > .th {
      color: $navy-3;
    }
  }
}

/*doc
---
title: Borderless
name: 3_table_borderless
parent: table
---

A borderless table, for those times where you don't want a border

```html_example
<div class="panel">
  <div class="panel-body pan">
    <table class="table table-borderless man">
      <thead>
        <tr>
          <th>Wombat Relative</th>
          <th>Cuteness Index</th>
          <th>Relatedness</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>Numbat</td>
          <td>2</td>
          <td>6</td>
        </tr>
        <tr>
          <td>Kangaroo</td>
          <td>91</td>
          <td>60</td>
        </tr>
        <tr>
          <td>Wallaby</td>
          <td>31</td>
          <td>55</td>
        </tr>
      </tbody>
    </table>
  </div>
</div>
```

*/

.table-borderless,
.table-borderless tr,
.table-borderless td,
.table-borderless > thead,
.table-borderless > thead > tr,
.table-borderless > thead > tr > td,
.table-borderless > tbody,
.table-borderless > tbody > tr,
.table-borderless > tbody > tr > td {
  border: 0;
}


/*doc
---
title: Key-Value
name: table_key_value
parent: table
---

This table is used when the table headings are on the left. It looks better when you
specify column widths for the th/tds.


```html_example
<table class="table table-key-value">
  <tbody>
    <tr>
      <th class="col-md-8">Email</th>
      <td class="col-md-16">joe@example.com</td>
    </tr>
    <tr>
      <th class="col-md-8">Current Password</th>
      <td class="col-md-16">*******</td>
    </tr>
    <tr>
      <th class="col-md-8">First Name</th>
      <td class="col-md-16">Joe</td>
    </tr>
    <tr>
      <th class="col-md-8">Last Name</th>
      <td class="col-md-16">Bobs</td>
    </tr>
    <tr>
      <th class="col-md-8">Phone</th>
      <td class="col-md-16">415-555-0000</td>
    </tr>
  </tbody>
</table>
```

*/
.table-key-value {
  table-layout: fixed;
  tbody, thead, .tbody, .thead {
    tr, .tr {
      th, .th {
        border: none; // overwriting bootstrap default values which are too specific
      }
    }
  }
  tbody {
    tr {
      &:last-child {
        border: none;
      }
      th, td {
        padding: 0;
        margin: 0;
      }
      th {
        font-weight: 800;
        text-align: left;
        color: $gray-5;
      }
      td {
        text-align: left;
        &:last-child {
          border: none;
        }
      }
    }
  }
}

/*pending
---
title: Clickable
name: table_clickable
parent: table_js
---

Use this style of table when rows are clickable. It is possible to prevent a user from clicking on a row w/ a message by adding data-prevent-click and data-prevent-click-message to the row. (N.B.: This does not actually add any sort of permissions to the URL in question).
We are making the assumption here that table-hover will *only* be used if the table is clickable, because we add a pointer.



```html_example
<table class="table table-data table-hover" data-behavior="ClickableTable">
  <thead>
    <tr>
      <th>Style</th>
      <th colspan="2">Clickability</th>
    </tr>
  </thead>
  <tbody>
    <tr data-prevent-click="true" data-prevent-click-message="YOU'VE ENTERED THE FORBIDDEN ZONE" data-target-path="/styleguide#link">
      <td>Forbidden Links</td>
      <td>High</td>
      <td class="txt-m txt-r">
        <i class="fa fa-chevron-right type-primary-4"></i>
      </td>
    </tr>
    <tr data-target-path="/styleguide#button">
      <td>Buttons</td>
      <td>Medium</td>
      <td class="txt-m txt-r">
        <i class="fa fa-chevron-right type-primary-4"></i>
      </td>
    </tr>
    <tr data-target-path="/styleguide#type">
      <td>Typography</td>
      <td>Low</td>
      <td class="txt-m txt-r">
        <i class="fa fa-chevron-right type-primary-4"></i>
      </td>
    </tr>
  </tbody>
</table>
```

*/

.table-hover {
  td {
    cursor: pointer;
  }
}

.table-sortable {
  th.sorted-desc {
    color: $navy-1;
    &:after {
      content: "\f0d7";
      color: $navy-1;
    }
  }

  .sortable, [sortable] { // latter selector is angular only
    @include no-select;
    cursor: pointer;
    &:after {
      margin-left: 4px;
      content: "";
      font-weight: 200;
      font-family: FontAwesome;
    }
    &:hover {
      background-color: white;
      -webkit-transition: background-color 300ms ease-out;
      -moz-transition: background-color 300ms ease-out;
      transition: background-color 300ms ease-out;
    }
  }

  th.sorted-none {
    &:hover:after {
      visibility: visible;
    }
    &:after {
      content: "\f0dc";
      color: $gray-8;
      visibility: hidden;
    }
  }

  th.sorted-asc {
    color: $navy-1;
    &:after {
      content: "\f0d8";
      color: $navy-1;
    }
  }
}

/*pending
---
title: Inline Addable
name: table_inline_addable
parent: table_js
---

```html_example
<div ng-class="{editing: spaceTable.editing}" ng-cloak="true" ng-controller="StyleguideAddableTableCtrl">
  <p class="txt-r">
    <a class="btn btn-default state-adding-trigger" href="javascript:void(0);" ng-click="spaceTable.enterEditMode()" ng-disabled="spaceTable.newModel.saving">
      Add a Space
    </a>
  </p>
  <table class="table table-data table-addable">
    <thead class="thead-state-viewing">
      <tr>
        <th class="txt-m col-md-8">
          Name
        </th>
        <th class="txt-m">
          Total Apps
        </th>
        <th class="txt-m">
          Running Apps
        </th>
        <th class="txt-m">
          Stopped Apps
        </th>
        <th class="txt-m">
          Down Apps
        </th>
        <th class="txt-m">
          Service Instance
        </th>
        <th class="txt-m">
          Quota
        </th>
        <th class="txt-m"></th>
      </tr>
    </thead>
    <thead class="state-editing-show">
      <tr>
        <th class="txt-m">
          Name
        </th>
      </tr>
    </thead>
    <tbody>
      <tr class="state-editing-show">
        <td>
          <form class="td-state-adding form-inline" name="newSpaceForm" ng-submit="spaceTable.save()">
            <div class="form-group mll">
              <input aria-describedby="space-name-error" autofocus="autofocus" class="form-control" invalid-invalid="true" name="name" ng-minlength="3" ng-model="spaceTable.newModel.name" required="true" type="text"></input>
            </div>
            <div class="form-group">
              <button class="btn btn-default" ng-disabled="!spaceTable.newModel.name" type="submit">Add</button>
              <a class="btn btn-default" ng-click="spaceTable.cancel()">Cancel</a>
            </div>
            <div class="error-container pal" id="space-name-error" ng-show="newSpaceForm.name.$dirty && newSpaceForm.name.$invalid" role="alert">
              <span class="error" ng-show="newSpaceForm.name.$error.required">Space name is required.</span>
              <span class="error" ng-show="newSpaceForm.name.$error.minlength">Space name is required to be at least 3 characters.</span>
              <span class="error" ng-show="newSpaceForm.name.$error.invalidInvalid">Space name cannot be invalid, literally.</span>
              <div ng-repeat="error in spaceTable.newModel.serverErrors">
                <span class="error">{{error}}</span>
              </div>
            </div>
          </form>
        </td>
      </tr>
      <tr class="inline-table-item" ng-repeat="space in spaceTable.collection.items">
        <td class="pls type-ellipsis-1-line" ng-class="{saveRequested: space.saving}">
          <div class="fa fa-check fa-check-success ng-hide" ng-show="space.freshlySaved"></div>
          {{space.name}}
        </td>
        <td>{{space.totalApps}}</td>
        <td>{{space.runningApps}}</td>
        <td>{{space.stoppedApps}}</td>
        <td>{{space.downApps}}</td>
        <td>{{space.serviceInstances}}</td>
        <td>{{space.quota}}</td>
        <td data-confirmation-action="spaceTable.destroy(space)" data-confirmation-header="Delete Space" data-confirmation-modal="Are you sure you want to delete this space?" data-dangerous-action="true">Delete</td>
      </tr>
    </tbody>
  </table>
</div>
```
*/

.editing {
  .state-adding-trigger {
    visibility: hidden;
  }
  .table-addable {
    .thead-state-viewing,
    .td-state-viewing {
      display: none;
    }

    td {
      display: none;
    }
    td:first-child {
      display: table-cell;
    }
    thead.state-editing-show {
      display: table-header-group;
    }
    tr.state-editing-show {
      display: table-row;
    }
  }
}

.table-addable {
  table-layout: fixed;

  .state-editing-show {
    display: none;
  }

  .state-adding-item-show {
    display: none;
  }

  .inline-table-item.ng-enter.ng-enter-active {
    opacity: 1;
    .addedConfirmation {
      display: table-cell;
    }
  }

  .inline-table-item {
    .addedConfirmation {
      color: forestgreen;
    }
  }

  .fa-check-success {
    color: $teal-3;
    font-size: 12px;
    margin-right: 5px;

    -webkit-transition: opacity 300ms ease-out;
    -moz-transition: opacity 300ms ease-out;
    transition: opacity 300ms ease-out;

    opacity: 1;
  }

  .fa-check-success.ng-hide {
    display: inline-block !important;
    opacity: 0;
  }

  .saveRequested {
    opacity: 0.3;
  }

  .deleteRequested {
    -webkit-transition: all ease-out .2s;
    transition: all ease-out .2s;
    color: $gray-5;
  }

  .ng-leave {
    -webkit-transition: all ease-out .5s;
    transition: all ease-out .5s;
  }

  .ng-leave.ng-leave-active {
    color: $gray-9;
  }

  .saved {
    opacity: 1;
    -webkit-transition: all 300ms ease-out;
    -moz-transition: all 300ms ease-out;
    transition: all 300ms ease-out;
  }

}

//
//.ng-valid {
//  @extend .has-success;
//}

/*pending
---
title: Kitchen Sink
name: table_kitchen_sink
parent: table_js
---

Example of composed behaviors that operate on the same table.

```html_example
<div ng-class="{editing: spaceTable.editing}" ng-cloak="true" ng-controller="StyleguideKitchenSinkTableCtrl">
  <p class="txt-r">
    <a class="btn btn-default state-adding-trigger" href="javascript:void(0);" ng-click="spaceTable.enterEditMode()" ng-disabled="spaceTable.newModel.saving">
      Add a Space
    </a>
  </p>
  <table class="table table-data table-sortable table-addable">
    <thead class="thead-state-viewing">
      <tr>
        <th class="txt-m" sortable="name">Name</th>
        <th sortable="totalApps">Total Apps</th>
        <th sortable="runningApps">Running Apps</th>
        <th sortable="stoppedApps">Stopped Apps</th>
        <th sortable="downApps">Down Apps</th>
        <th class="txt-m" sortable="serviceInstances">Service Instances</th>
        <th class="txt-m" sortable="quota">Quota</th>
      </tr>
    </thead>
    <thead class="state-editing-show">
      <tr>
        <th class="txt-m">
          Name
        </th>
      </tr>
    </thead>
    <tbody>
      <tr class="state-editing-show">
        <td>
          <form class="td-state-adding form-inline" name="newSpaceForm" ng-submit="spaceTable.save()">
            <div class="form-group mll">
              <input aria-describedby="space-name-error" autofocus="autofocus" class="form-control" invalid-invalid="true" name="name" ng-minlength="3" ng-model="spaceTable.newModel.name" required="true" type="text"></input>
            </div>
            <div class="form-group">
              <button class="btn btn-default" ng-disabled="!spaceTable.newModel.name" type="submit">Add</button>
              <a class="btn btn-default" ng-click="spaceTable.cancel()">Cancel</a>
            </div>
            <div class="error-container pal" id="space-name-error" ng-show="newSpaceForm.name.$dirty && newSpaceForm.name.$invalid" role="alert">
              <span class="error" ng-show="newSpaceForm.name.$error.required">Space name is required.</span>
              <span class="error" ng-show="newSpaceForm.name.$error.minlength">Space name is required to be at least 3 characters.</span>
              <span class="error" ng-show="newSpaceForm.name.$error.invalidInvalid">Space name cannot be invalid, literally.</span>
              <div ng-repeat="error in spaceTable.newModel.serverErrors">
                <span class="error">{{error}}</span>
              </div>
            </div>
          </form>
        </td>
      </tr>
      <tr ng-repeat="space in spaceTable.collection.items">
        <td class="pls type-ellipsis-1-line" ng-class="{saveRequested: space.saving}">
          <div class="fa fa-check fa-check-success ng-hide" ng-show="space.freshlySaved"></div>
          {{space.name}}
        </td>
        <td>{{space.totalApps}}</td>
        <td>{{space.runningApps}}</td>
        <td>{{space.stoppedApps}}</td>
        <td>{{space.downApps}}</td>
        <td>{{space.serviceInstances}}</td>
        <td>{{space.quota}}</td>
      </tr>
    </tbody>
  </table>
</div>
```

*/

/*doc
---
title: Scrollable
name: scrollable_table
parent: table
---

Table with borders where the contents of the table scroll but the header does not.
The default height of the scrollable table is 183px. There are four other sizes provided
which you can use by adding the following classes to the `.table-scrollable` element.

Table Scrollable sizes | Height
---------------------- | ---------
default                | 183px
`.table-scrollable-sm` | 300px
`.table-scrollable-md` | 600px
`.table-scrollable-lg` | 900px

If you would like a custom size, please add an inline style to the `.table-scrollable-body` element.

Design Note: The `table-scrollable` is often paired with `table-data` as in our example.

<div class="alert alert-info alert-dismissable">
  <p class="em-high">
    You will need to specify the width of <strong>every</strong> column in both the <code>thead</code> and
    the first row of the <code>tbody</code>. You can do this with inline width attributes.
  </p>
</div>

```html_example
<div class="panel panel-basic-alt panel-table-wrapper">
  <div class="panel-body pan">
    <div class="table-scrollable table-scrollable-sm man">
      <div class="table-scrollable-header">
        <table class="table table-data">
          <thead>
            <tr>
              <th width="10%">#</th>
              <th width="16%">Status</th>
              <th width="12%">CPU</th>
              <th width="16%">Memory</th>
              <th width="16%">Disk</th>
              <th width="30%">Uptime</th>
            </tr>
          </thead>
        </table>
      </div>
      <div class="table-scrollable-body">
        <table class="table table-data">
          <tbody>
            <tr>
              <td width="10%">0</td>
              <td width="16%">Running</td>
              <td width="12%">0%</td>
              <td width="16%">4.16 MB</td>
              <td width="16%">6.75 MB</td>
              <td width="30%">27 min</td>
            </tr>
            <tr>
              <td>1</td>
              <td>Running</td>
              <td>0%</td>
              <td>4.07 MB</td>
              <td>6.75 MB</td>
              <td>27 min</td>
            </tr>
            <tr>
              <td>2</td>
              <td>Running</td>
              <td>0%</td>
              <td>4.07 MB</td>
              <td>6.75 MB</td>
              <td>25 min</td>
            </tr>
            <tr>
              <td>3</td>
              <td>Running</td>
              <td>0%</td>
              <td>4.14 MB</td>
              <td>6.75 MB</td>
              <td>25 min</td>
            </tr>
            <tr>
              <td>4</td>
              <td>Running</td>
              <td>0%</td>
              <td>4.08 MB</td>
              <td>6.75 MB</td>
              <td>25 min</td>
            </tr>
            <tr>
              <td>5</td>
              <td>Running</td>
              <td>0%</td>
              <td>4.16 MB</td>
              <td>6.75 MB</td>
              <td>25 min</td>
            </tr>
            <tr>
              <td>6</td>
              <td>Running</td>
              <td>0%</td>
              <td>4.07 MB</td>
              <td>6.75 MB</td>
              <td>25 min</td>
            </tr>
            <tr>
              <td>7</td>
              <td>Running</td>
              <td>0%</td>
              <td>4.07 MB</td>
              <td>6.75 MB</td>
              <td>25 min</td>
            </tr>
            <tr>
              <td>8</td>
              <td>Running</td>
              <td>0%</td>
              <td>4.03 MB</td>
              <td>6.75 MB</td>
              <td>25 min</td>
            </tr>
            <tr>
              <td>9</td>
              <td>Running</td>
              <td>0%</td>
              <td>4.07 MB</td>
              <td>6.75 MB</td>
              <td>25 min</td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>
```
*/

.table-scrollable {
  table {
    table-layout: fixed;
  }

  .table {
    margin: 0;
  }

  .table-scrollable-header {
    border-bottom: $table-scrollable-header-border;
  }

  .table-scrollable-body {
    border-top: $table-scrollable-body-border;
    max-height: $table-scrollable-default-height;
    overflow-y: auto;
    overflow-x: hidden;
  }

  &.table-scrollable-sm {
    .table-scrollable-body {
      max-height: $table-scrollable-sm;
    }
  }
  &.table-scrollable-md {
    .table-scrollable-body {
      max-height: $table-scrollable-md;
    }
  }
  &.table-scrollable-lg {
    .table-scrollable-body {
      max-height: $table-scrollable-lg;
    }
  }
}

