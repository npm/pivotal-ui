@import "../pui-variables";

/*doc
---
title: Responsive Utilities
name: responsive_utilities
categories:
 - css_utilities_responsive-utilities
 - react_utilities_responsive-utilities
 - css_all
---

Use a single or combination of the available classes for toggling content across viewport breakpoints.

<table class="styleguide">
  <thead>
    <tr>
      <th></th>
      <th>
        Extra small devices
        <small>Phones (&lt;768px)</small>
      </th>
      <th>
        Small devices
        <small>Tablets (&geq;768px)</small>
      </th>
      <th>
        Medium devices
        <small>Desktops (&geq;992px)</small>
      </th>
      <th>
        Large devices
        <small>Desktops (&geq;1200px)</small>
      </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th class="no-wrap"><code>.visible-xs-*</code></th>
      <td class="is-visible">Visible</td>
      <td class="is-hidden">Hidden</td>
      <td class="is-hidden">Hidden</td>
      <td class="is-hidden">Hidden</td>
    </tr>
    <tr>
      <th class="no-wrap"><code>.visible-sm-*</code></th>
      <td class="is-hidden">Hidden</td>
      <td class="is-visible">Visible</td>
      <td class="is-hidden">Hidden</td>
      <td class="is-hidden">Hidden</td>
    </tr>
    <tr>
      <th class="no-wrap"><code>.visible-md-*</code></th>
      <td class="is-hidden">Hidden</td>
      <td class="is-hidden">Hidden</td>
      <td class="is-visible">Visible</td>
      <td class="is-hidden">Hidden</td>
    </tr>
    <tr>
      <th class="no-wrap"><code>.visible-lg-*</code></th>
      <td class="is-hidden">Hidden</td>
      <td class="is-hidden">Hidden</td>
      <td class="is-hidden">Hidden</td>
      <td class="is-visible">Visible</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <th class="no-wrap"><code>.hidden-xs</code></th>
      <td class="is-hidden">Hidden</td>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
    </tr>
    <tr>
      <th class="no-wrap"><code>.hidden-sm</code></th>
      <td class="is-visible">Visible</td>
      <td class="is-hidden">Hidden</td>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
    </tr>
    <tr>
      <th class="no-wrap"><code>.hidden-md</code></th>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
      <td class="is-hidden">Hidden</td>
      <td class="is-visible">Visible</td>
    </tr>
    <tr>
      <th class="no-wrap"><code>.hidden-lg</code></th>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
      <td class="is-hidden">Hidden</td>
    </tr>
  </tbody>
</table>


The `.visible-*-*` classes for each breakpoint come in three variations, one for each CSS display property value listed below.

<table class="styleguide">
  <thead>
    <tr>
      <th>Group of classes</th>
      <th>CSS display</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="no-wrap"><code>.visible-*-block</code></td>
      <td class="no-wrap"><code>display: block;</code></td>
    </tr>
    <tr>
      <td class="no-wrap"><code>.visible-*-inline</code></td>
      <td class="no-wrap"><code>display: inline;</code></td>
    </tr>
    <tr>
      <td class="no-wrap"><code>.visible-*-inline-block</code></td>
      <td class="no-wrap"><code>display: inline-block;</code></td>
    </tr>
  </tbody>
</table>

So, for extra small (`xs`) screens for example, the available `.visible-*-*` classes are:

- `.visible-xs-block`
- `.visible-xs-inline`
- `.visible-xs-inline-block`

*/

/*doc
---
title: Background Images
name: responsive_background_images
parent: responsive_utilities
---

<table class="styleguide">
  <thead>
    <tr>
      <th></th>
      <th>
        Extra small devices
        <small>Phones (&lt;768px)</small>
      </th>
      <th>
        Small devices
        <small>Tablets (&geq;768px)</small>
      </th>
      <th>
        Medium devices
        <small>Desktops (&geq;992px)</small>
      </th>
      <th>
        Large devices
        <small>Desktops (&geq;1200px)</small>
      </th>
      <th>
        Extra large devices
        <small>Desktops (&geq;1600px)</small>
      </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th class="no-wrap"><code>.nobg-xs</code></th>
      <td class="is-hidden">Hidden</td>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
    </tr>
    <tr>
      <th class="no-wrap"><code>.nobg-sm</code></th>
      <td class="is-visible">Visible</td>
      <td class="is-hidden">Hidden</td>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
    </tr>
    <tr>
      <th class="no-wrap"><code>.nobg-md</code></th>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
      <td class="is-hidden">Hidden</td>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
    </tr>
    <tr>
      <th class="no-wrap"><code>.nobg-lg</code></th>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
      <td class="is-hidden">Hidden</td>
      <td class="is-visible">Visible</td>
    </tr>
    <tr>
      <th class="no-wrap"><code>.nobg-xl</code></th>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
      <td class="is-hidden">Hidden</td>
    </tr>
  </tbody>
</table>


*/

@media (max-width: $screen-xs-max) {
  .nobg-xs {
    background-image: none !important;
  }
}
@media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
  .nobg-sm {
    background-image: none !important;
  }
}
@media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
  .nobg-md {
    background-image: none !important;
  }
}
@media (min-width: $screen-lg-min) and (max-width: $screen-lg-max) {
  .nobg-lg {
    background-image: none !important;
  }
}
@media (min-width: $screen-xl-min) {
  .nobg-xl {
    background-image: none !important;
  }
}

/*doc
---
title: Print
name: print
categories:
 - css_utilities_print
 - react_utilities_print
 - css_all
---

Similar to the regular responsive classes, use these for toggling content for print.

<table class="styleguide">
  <thead>
    <tr>
      <th>Classes</th>
      <th>Browser</th>
      <th>Print</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>
        <code>.visible-print-block</code><br>
        <code>.visible-print-inline</code><br>
        <code>.visible-print-inline-block</code>
      </th>
      <td class="is-hidden">Hidden</td>
      <td class="is-visible">Visible</td>
    </tr>
    <tr>
      <th><code>.hidden-print</code></th>
      <td class="is-visible">Visible</td>
      <td class="is-hidden">Hidden</td>
    </tr>
  </tbody>
</table>


*/

/*doc
---
title: Marginalia
name: marginalia
categories:
 - css_utilities_marginalia
 - css_all
---

Marginalia are the things in the gutters of a block. That's a CSS distinction and the term is old) of an element â€” an icon aside main content, mostly.

The marginalia size you use should match the gutter size you use. Only sizes `xxl`, `xxxl` and `xxxxl` are available because the other spaces are too small to be useful.

```html_example
<div class="marginalia-container">
  <div class="marginalia-xxxxl">
    <svg width="130" height="130"><use xlink:href="#i-keyhole"/></svg>
  </div>
  <div class="glxxxxl">
    <h1>This is some text!</h1>
    <p>Bacon ipsum dolor amet filet mignon culpa porchetta velit drumstick do capicola esse chuck sint voluptate. Hamburger sunt bresaola nulla eiusmod. Meatloaf porchetta elit t-bone ut aliqua. Veniam sunt biltong ball tip. T-bone porchetta officia ad ut strip steak hamburger qui adipisicing rump.</p>
  </div>
</div>
<div class="marginalia-container">
  <div class="marginalia-xxxl">
    <svg width="110" height="110"><use xlink:href="#i-keyhole"/></svg>
  </div>
  <div class="glxxxl">
    <h1>This is some text!</h1>
    <p>Bacon ipsum dolor amet filet mignon culpa porchetta velit drumstick do capicola esse chuck sint voluptate. Hamburger sunt bresaola nulla eiusmod. Meatloaf porchetta elit t-bone ut aliqua. Veniam sunt biltong ball tip. T-bone porchetta officia ad ut strip steak hamburger qui adipisicing rump.</p>
  </div>
</div>
<div class="marginalia-container">
  <div class="marginalia-xxl">
    <svg width="35" height="35"><use xlink:href="#i-keyhole"/></svg>
  </div>
  <div class="glxxl">
    <h1>This is some text!</h1>
    <p>Bacon ipsum dolor amet filet mignon culpa porchetta velit drumstick do capicola esse chuck sint voluptate. Hamburger sunt bresaola nulla eiusmod. Meatloaf porchetta elit t-bone ut aliqua. Veniam sunt biltong ball tip. T-bone porchetta officia ad ut strip steak hamburger qui adipisicing rump.</p>
  </div>
</div>
```

  <svg style="display: none">
    <symbol id="i-keyhole" viewBox="0 0 56 56">
      <path d="M37 21a9 9 0 0 0-18 0c0 3.51 2.012 6.54 4.94 8.025L20 44h16l-3.94-14.975C34.987 27.54 37 24.51 37 21zm-5.846 6.24l-1.44.732.41 1.562L33.407 42H22.594l3.28-12.466.412-1.562-1.44-.73A6.97 6.97 0 0 1 21 21c0-3.86 3.14-7 7-7s7 3.14 7 7a6.97 6.97 0 0 1-3.846 6.24zM28 0C12.536 0 0 12.536 0 28s12.536 28 28 28 28-12.536 28-28S43.464 0 28 0zm0 54C13.664 54 2 42.337 2 28S13.664 2 28 2s26 11.663 26 26-11.664 26-26 26z"/>
    </symbol>
  </svg>
*/
.marginalia-container {
  position: relative;
}

.marginalia-xxxxl {
  position: absolute;
  width: $whitespace-xxxxl - $whitespace-s;
}

.marginalia-xxxl {
  position: absolute;
  width: $whitespace-xxxl - $whitespace-s;
}

.marginalia-xxl {
  position: absolute;
  width: $whitespace-xxl - $whitespace-s;
}

/*doc
---
title: Screen-filling
name: screen-fill
categories:
 - css_utilities_screen-fill
 - css_all
---

Screen-filling classes are utilities to make the root elements behave in a way that lets us attach footers to the actual bottom of the page, rather than filling space at the foot.

```html_example
<div class="screen-fill-root" style="height: 300px">
  <div class="screen-fill-body">
    <div class="h1 bg-neutral-8">Header</div>
    <div class="screen-fill-main">Content</div>
    <dic class="h1 bg-neutral-8">Footer</div>
  </div>
</div>
```
*/

.screen-fill-root {
  height: 100%;
  display: flex; // This must be a flex to fix an IE flex bug: https://github.com/philipwalton/flexbugs#3-min-height-on-a-flex-container-wont-apply-to-its-flex-items
  flex-direction: column;
}

.screen-fill-body {
  display: flex;
  flex-direction: column;
  min-height: 100%;
  justify-content: space-between;
}

.screen-fill-main {
  flex: auto 1 0;
}
